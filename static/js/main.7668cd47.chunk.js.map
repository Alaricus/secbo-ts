{"version":3,"sources":["utils.ts","components/ImageDetails.tsx","components/ImageUploader.tsx","components/UserAlert.tsx","components/App.tsx","constants.ts","reportWebVitals.ts","index.tsx"],"names":["textToBinary","txt","split","map","c","charCodeAt","toString","join","readAlpha","context","text","bin","b","String","fromCharCode","parseInt","binaryToText","getImageData","canvas","width","height","data","reduce","acc","value","index","startsWith","substring","length","endsWith","ImageDetails","imageInfo","pixels","freePixels","className","image","style","color","Math","abs","ImageUploader","props","updateCanvas","setImageInfo","fireAlert","onDrop","e","preventDefault","fr","FileReader","img","Image","file","dataTransfer","files","item","type","readAsDataURL","onload","event","alpha","name","binary","result","target","src","onDragEnter","onDragOver","alt","UserAlert","message","dismiss","onClick","App","canvasRef","useRef","useState","dl","setPixels","setFreePixels","alertMessage","setAlertMessage","useEffect","tempPixels","tempFreePixels","getCTX","current","getContext","Error","throwNullErr","ctx","drawImage","rows","cols","onChange","ctxImageData","forEach","_","digit","putImageData","writeAlpha","toDataURL","handleChange","role","href","download","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7668cd47.chunk.js","sourcesContent":["export const throwNullErr = (): never => { throw new Error('Context was null'); };\r\n\r\nexport const textToBinary = (txt: string): string => `[secbo]${txt}[/secbo]`.split('').map(c => `${c.charCodeAt(0).toString(2)} `).join('');\r\n\r\nexport const binaryToText = (bin: string): string => bin.split(' ').map(b => String.fromCharCode(parseInt(b, 2))).join('');\r\n\r\nexport const readAlpha = (context: CanvasRenderingContext2D): string | null => {\r\n  const ctxImageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n  const bin = ctxImageData.data.reduce((acc, value, index) => {\r\n    if (index > 0 && (index + 1) % 4 === 0) {\r\n      if (value === 253) {\r\n        const tempAcc = `${acc} `;\r\n        return tempAcc;\r\n      }\r\n      if (value === 254) {\r\n        const tempAcc = `${acc}1`;\r\n        return tempAcc;\r\n      }\r\n      if (value === 255) {\r\n        const tempAcc = `${acc}0`;\r\n        return tempAcc;\r\n      }\r\n    }\r\n    return acc;\r\n  }, '');\r\n\r\n  const text = binaryToText(bin);\r\n\r\n  if (text.startsWith('[secbo]') && text.substring(0, text.length - 1).endsWith('[/secbo]')) {\r\n    return text.substring(7, text.length - 9);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const writeAlpha = (context: CanvasRenderingContext2D, binary: string, fireAlert: (str: string) => void): void => {\r\n  const ctxImageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n  if (ctxImageData.data.length / 4 >= binary.length) {\r\n    // This sets everything to 255, so no need to handle zeroes\r\n    ctxImageData.data.forEach((_, index) => {\r\n      if (index > 0 && (index + 1) % 4 === 0) {\r\n        ctxImageData.data[index] = 255;\r\n      }\r\n    });\r\n\r\n    binary.split('').forEach((digit, index) => {\r\n      if (digit === '1') {\r\n        ctxImageData.data[(index * 4) + 3] = 254;\r\n      }\r\n\r\n      if (digit === ' ') {\r\n        ctxImageData.data[(index * 4) + 3] = 253;\r\n      }\r\n    });\r\n\r\n    context.putImageData(ctxImageData, 0, 0);\r\n  } else {\r\n    fireAlert('The image is too small to contain all this data.');\r\n  }\r\n};\r\n","import { FC } from 'react';\r\n\r\nexport interface ImageInfo {\r\n  text: string,\r\n  binary: string,\r\n  image: HTMLImageElement | null,\r\n  name: string,\r\n  dl: string,\r\n}\r\n\r\ninterface ImageDetailsProps {\r\n  imageInfo: ImageInfo,\r\n  pixels: number,\r\n  freePixels: number,\r\n}\r\n\r\nconst ImageDetails: FC<ImageDetailsProps> = ({ imageInfo, pixels, freePixels }) => (\r\n  <div className=\"Details\">\r\n    {imageInfo.image && `${pixels} total pixels, `}\r\n    <span style={{ color: freePixels > 0 ? 'black' : 'red' }}>\r\n      {imageInfo.image && `${Math.abs(freePixels)} ${freePixels > 0 ? 'still available' : 'over the limit'}`}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default ImageDetails;\r\n","import { Dispatch, FC, DragEvent, SetStateAction } from 'react';\r\nimport { ImageInfo } from './ImageDetails';\r\n\r\nexport type UpdateCanvas = (image: HTMLImageElement) => void;\r\n\r\ninterface ImageUploaderProps {\r\n  updateCanvas: UpdateCanvas,\r\n  imageInfo: ImageInfo,\r\n  setImageInfo: Dispatch<SetStateAction<ImageInfo>>,\r\n  readAlpha: () => string | null,\r\n  textToBinary: (str: string) => string,\r\n  fireAlert: (str: string) => void,\r\n}\r\n\r\nconst ImageUploader: FC<ImageUploaderProps> = props => {\r\n  const { updateCanvas, imageInfo, setImageInfo, readAlpha, textToBinary, fireAlert } = props;\r\n  const uploadImage = (e: DragEvent<HTMLDivElement>): void => {\r\n    e.preventDefault();\r\n    const fr = new FileReader();\r\n    const img = new Image();\r\n\r\n    // Only accept png images and only use the first file if several are dragged.\r\n    const file = e.dataTransfer.files.item(0);\r\n\r\n    if (!file) {\r\n      fireAlert('Something went wrong with the file upload.');\r\n      return;\r\n    }\r\n\r\n    if (file.type === 'image/png') {\r\n      fr.readAsDataURL(file);\r\n    } else {\r\n      fireAlert('Invalid format. Please use a PNG image.');\r\n    }\r\n\r\n    fr.onload = event => {\r\n      img.onload = () => {\r\n        updateCanvas(img);\r\n        const alpha = readAlpha() ?? '';\r\n        setImageInfo({\r\n          ...imageInfo,\r\n          image: img,\r\n          name: file.name,\r\n          text: alpha,\r\n          binary: textToBinary(alpha),\r\n        });\r\n      };\r\n\r\n      const { result } = event.target ?? {};\r\n      if (typeof result === 'string') {\r\n        img.src = result;\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"ImageUploader\"\r\n      onDrop={uploadImage}\r\n      onDragEnter={e => e.preventDefault()}\r\n      onDragOver={e => e.preventDefault()}\r\n    >\r\n      {\r\n        imageInfo.image\r\n          ? (\r\n            <img\r\n              className=\"ImagePreview\"\r\n              src={imageInfo.image.src}\r\n              alt=\"thumbnail\"\r\n            />\r\n          ) : (\r\n            <span>drag an image file here</span>\r\n          )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import { FC } from 'react';\r\n\r\ntype UserAlertProps = {\r\n  message: string;\r\n  dismiss: (str: string) => void;\r\n}\r\n\r\nconst UserAlert: FC<UserAlertProps> = ({ message = '', dismiss }) => (\r\n  <div className={`UserAlert ${message ? 'UaDescend' : ''}`}>\r\n    {message}\r\n    {\r\n      message && <button type=\"button\" className=\"Dismiss\" onClick={() => dismiss('')}>×</button>\r\n    }\r\n  </div>\r\n);\r\n\r\nexport default UserAlert;\r\n","import { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport DEFAULT_BINARY_CONTENT from '../constants';\r\nimport { readAlpha, textToBinary, throwNullErr, writeAlpha } from '../utils';\r\nimport ImageDetails, { ImageInfo } from './ImageDetails';\r\nimport ImageUploader, { UpdateCanvas } from './ImageUploader';\r\nimport UserAlert from './UserAlert';\r\n\r\nconst App = (): JSX.Element => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [imageInfo, setImageInfo] = useState<ImageInfo>({ text: '', binary: '', image: null, name: '', dl: '' });\r\n  const [pixels, setPixels] = useState(0);\r\n  const [freePixels, setFreePixels] = useState(0);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (imageInfo?.image) {\r\n      const tempPixels = imageInfo.image.width * imageInfo.image.height;\r\n      const tempFreePixels = tempPixels - imageInfo.binary.length;\r\n\r\n      setPixels(tempPixels);\r\n      setFreePixels(tempFreePixels);\r\n    }\r\n  }, [imageInfo.text, imageInfo.binary, imageInfo.image]);\r\n\r\n  const getCTX = () => canvasRef.current?.getContext('2d') ?? throwNullErr();\r\n\r\n  const updateCanvas: UpdateCanvas = image => {\r\n    const ctx = getCTX();\r\n    ctx.canvas.width = image.width;\r\n    ctx.canvas.height = image.height;\r\n    ctx.drawImage(image, 0, 0);\r\n  };\r\n\r\n  const reset = (): void => {\r\n    setImageInfo({\r\n      text: '',\r\n      binary: DEFAULT_BINARY_CONTENT,\r\n      image: null,\r\n      name: '',\r\n      dl: '',\r\n    });\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    const ctx = getCTX();\r\n    writeAlpha(ctx, textToBinary(e.target.value), setAlertMessage);\r\n    setImageInfo({\r\n      ...imageInfo,\r\n      text: e.target.value,\r\n      binary: textToBinary(e.target.value),\r\n      dl: canvasRef.current?.toDataURL('image/png') ?? '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <UserAlert message={alertMessage} dismiss={setAlertMessage} />\r\n      <h2>secbo-ts</h2>\r\n      <p>v 1.2.1</p>\r\n      <ImageUploader\r\n        updateCanvas={updateCanvas}\r\n        imageInfo={imageInfo}\r\n        setImageInfo={setImageInfo}\r\n        readAlpha={() => readAlpha(getCTX())}\r\n        textToBinary={textToBinary}\r\n        fireAlert={setAlertMessage}\r\n      />\r\n      {\r\n        imageInfo?.image?.src\r\n        && (\r\n          <>\r\n            <ImageDetails\r\n              imageInfo={imageInfo}\r\n              pixels={pixels}\r\n              freePixels={freePixels}\r\n            />\r\n            <textarea\r\n              rows={15}\r\n              cols={50}\r\n              value={imageInfo.text}\r\n              onChange={e => handleChange(e)}\r\n            />\r\n          </>\r\n        )\r\n      }\r\n      {\r\n        imageInfo.text.length > 0\r\n        && (\r\n          <a\r\n            role=\"button\"\r\n            href={imageInfo.dl}\r\n            download={imageInfo.name}\r\n          >\r\n            download\r\n          </a>\r\n        )\r\n      }\r\n      {\r\n        imageInfo?.image?.src\r\n        && (\r\n          <button type=\"button\" onClick={reset}>reset</button>\r\n        )\r\n      }\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This is [secbo][/secbo]\r\nconst DEFAULT_BINARY_CONTENT = `\r\n  1011011 1110011 1100101 1100011 1100010 1101111 1011101\r\n  1011011 101111 1110011 1100101 1100011 1100010 1101111 1011101\r\n`;\r\n\r\nexport default DEFAULT_BINARY_CONTENT;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}