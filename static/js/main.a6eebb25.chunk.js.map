{"version":3,"sources":["utils.ts","components/ImageDetails.tsx","components/ImageUploader.tsx","components/App.tsx","constants.ts","reportWebVitals.ts","index.tsx"],"names":["textToBinary","txt","split","map","c","charCodeAt","toString","join","readAlpha","context","text","bin","b","String","fromCharCode","parseInt","binaryToText","getImageData","canvas","width","height","data","reduce","acc","value","index","startsWith","substring","length","endsWith","ImageDetails","imageInfo","pixels","freePixels","className","image","style","color","ImageUploader","updateCanvas","setImageInfo","onDrop","e","preventDefault","fr","FileReader","img","Image","file","dataTransfer","files","item","type","readAsDataURL","console","log","onload","event","alpha","name","binary","result","target","src","error","onDragEnter","onDragOver","alt","App","canvasRef","useRef","useState","dl","setPixels","setFreePixels","useEffect","tempPixels","tempFreePixels","getCTX","current","getContext","Error","throwNullErr","handleChange","ctxImageData","forEach","_","digit","putImageData","alert","writeAlpha","toDataURL","ctx","drawImage","rows","cols","onChange","role","href","download","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6eebb25.chunk.js","sourcesContent":["export const throwNullErr = (): never => { throw new Error('Context was null'); };\r\n\r\nexport const textToBinary = (txt: string): string => `[secbo]${txt}[/secbo]`.split('').map(c => `${c.charCodeAt(0).toString(2)} `).join('');\r\n\r\nexport const binaryToText = (bin: string): string => bin.split(' ').map(b => String.fromCharCode(parseInt(b, 2))).join('');\r\n\r\nexport const readAlpha = (context: CanvasRenderingContext2D): string | null => {\r\n  const ctxImageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n  const bin = ctxImageData.data.reduce((acc, value, index) => {\r\n    if (index > 0 && (index + 1) % 4 === 0) {\r\n      if (value === 253) {\r\n        const tempAcc = `${acc} `;\r\n        return tempAcc;\r\n      }\r\n      if (value === 254) {\r\n        const tempAcc = `${acc}1`;\r\n        return tempAcc;\r\n      }\r\n      if (value === 255) {\r\n        const tempAcc = `${acc}0`;\r\n        return tempAcc;\r\n      }\r\n    }\r\n    return acc;\r\n  }, '');\r\n\r\n  const text = binaryToText(bin);\r\n\r\n  if (text.startsWith('[secbo]') && text.substring(0, text.length - 1).endsWith('[/secbo]')) {\r\n    return text.substring(7, text.length - 9);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport const writeAlpha = (context: CanvasRenderingContext2D, binary: string): void => {\r\n  const ctxImageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\r\n  if (ctxImageData.data.length / 4 >= binary.length) {\r\n    // This sets everything to 255, so no need to handle zeroes\r\n    ctxImageData.data.forEach((_, index) => {\r\n      if (index > 0 && (index + 1) % 4 === 0) {\r\n        ctxImageData.data[index] = 255;\r\n      }\r\n    });\r\n\r\n    binary.split('').forEach((digit, index) => {\r\n      if (digit === '1') {\r\n        ctxImageData.data[(index * 4) + 3] = 254;\r\n      }\r\n\r\n      if (digit === ' ') {\r\n        ctxImageData.data[(index * 4) + 3] = 253;\r\n      }\r\n    });\r\n\r\n    context.putImageData(ctxImageData, 0, 0);\r\n  } else {\r\n    // TODO: Set up a mechanism for reporting errors to the user\r\n    alert('The image was too small to contain all this data.');\r\n  }\r\n};\r\n","import { FC } from 'react';\r\n\r\nexport interface ImageInfo {\r\n  text: string,\r\n  binary: string,\r\n  image: HTMLImageElement | null,\r\n  name: string,\r\n  dl: string,\r\n}\r\n\r\ninterface ImageDetailsProps {\r\n  imageInfo: ImageInfo,\r\n  pixels: number,\r\n  freePixels: number,\r\n}\r\n\r\nconst ImageDetails: FC<ImageDetailsProps> = ({ imageInfo, pixels, freePixels }) => (\r\n  <div className=\"Details\">\r\n    {imageInfo.image && `${pixels} total pixels, `}\r\n    <span style={{ color: freePixels > 0 ? 'black' : 'red' }}>\r\n      {imageInfo.image && `${freePixels} still available`}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default ImageDetails;\r\n","import { Dispatch, FC, DragEvent, SetStateAction } from 'react';\r\nimport { ImageInfo } from './ImageDetails';\r\n\r\nexport type UpdateCanvas = (image: HTMLImageElement) => void;\r\n\r\ninterface ImageUploaderProps {\r\n  updateCanvas: UpdateCanvas,\r\n  imageInfo: ImageInfo,\r\n  setImageInfo: Dispatch<SetStateAction<ImageInfo>>,\r\n  readAlpha: () => string | null,\r\n  textToBinary: (str: string) => string,\r\n}\r\n\r\nconst ImageUploader: FC<ImageUploaderProps> = ({ updateCanvas, imageInfo, setImageInfo, readAlpha, textToBinary }) => {\r\n  const uploadImage = (e: DragEvent<HTMLDivElement>): void => {\r\n    e.preventDefault();\r\n    const fr = new FileReader();\r\n    const img = new Image();\r\n\r\n    // Only accept png images and only use the first file if several are dragged.\r\n    const file = e.dataTransfer.files.item(0);\r\n\r\n    if (!file) {\r\n      console.error('Something went wrong with the file upload');\r\n      return;\r\n    }\r\n\r\n    if (file.type === 'image/png') {\r\n      fr.readAsDataURL(file);\r\n    } else {\r\n      // TODO: Set up a mechanism for reporting errors to the user\r\n      console.log('Invalid format. Use a PNG image.');\r\n    }\r\n\r\n    fr.onload = event => {\r\n      img.onload = () => {\r\n        updateCanvas(img);\r\n        const alpha = readAlpha() ?? '';\r\n        setImageInfo({\r\n          ...imageInfo,\r\n          image: img,\r\n          name: file.name,\r\n          text: alpha,\r\n          binary: textToBinary(alpha),\r\n        });\r\n      };\r\n\r\n      const { result } = event.target ?? {};\r\n      if (typeof result === 'string') {\r\n        img.src = result;\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"ImageUploader\"\r\n      onDrop={uploadImage}\r\n      onDragEnter={e => e.preventDefault()}\r\n      onDragOver={e => e.preventDefault()}\r\n    >\r\n      {\r\n        imageInfo.image\r\n          ? (\r\n            <img\r\n              className=\"ImagePreview\"\r\n              src={imageInfo.image.src}\r\n              alt=\"thumbnail\"\r\n            />\r\n          ) : (\r\n            <span>drag an image file here</span>\r\n          )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport DEFAULT_BINARY_CONTENT from '../constants';\r\nimport { readAlpha, textToBinary, throwNullErr, writeAlpha } from '../utils';\r\nimport ImageDetails, { ImageInfo } from './ImageDetails';\r\nimport ImageUploader, { UpdateCanvas } from './ImageUploader';\r\n\r\nconst App = (): JSX.Element => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [imageInfo, setImageInfo] = useState<ImageInfo>({ text: '', binary: '', image: null, name: '', dl: '' });\r\n  const [pixels, setPixels] = useState(0);\r\n  const [freePixels, setFreePixels] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (imageInfo?.image) {\r\n      const tempPixels = imageInfo.image.width * imageInfo.image.height;\r\n      const tempFreePixels = tempPixels - imageInfo.binary.length;\r\n\r\n      setPixels(tempPixels);\r\n      setFreePixels(tempFreePixels);\r\n    }\r\n  }, [imageInfo.text, imageInfo.binary, imageInfo.image]);\r\n\r\n  const getCTX = () => canvasRef.current?.getContext('2d') ?? throwNullErr();\r\n\r\n  const updateCanvas: UpdateCanvas = image => {\r\n    const ctx = getCTX();\r\n    ctx.canvas.width = image.width;\r\n    ctx.canvas.height = image.height;\r\n    ctx.drawImage(image, 0, 0);\r\n  };\r\n\r\n  const reset = (): void => {\r\n    setImageInfo({\r\n      text: '',\r\n      binary: DEFAULT_BINARY_CONTENT,\r\n      image: null,\r\n      name: '',\r\n      dl: '',\r\n    });\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    const ctx = getCTX();\r\n    writeAlpha(ctx, textToBinary(e.target.value));\r\n    setImageInfo({\r\n      ...imageInfo,\r\n      text: e.target.value,\r\n      binary: textToBinary(e.target.value),\r\n      dl: canvasRef.current?.toDataURL('image/png') ?? '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>secbo-ts</h2>\r\n      <p>v 1.1.0</p>\r\n      <ImageUploader\r\n        updateCanvas={updateCanvas}\r\n        imageInfo={imageInfo}\r\n        setImageInfo={setImageInfo}\r\n        readAlpha={() => readAlpha(getCTX())}\r\n        textToBinary={textToBinary}\r\n      />\r\n      <ImageDetails\r\n        imageInfo={imageInfo}\r\n        pixels={pixels}\r\n        freePixels={freePixels}\r\n      />\r\n      <textarea\r\n        rows={15}\r\n        cols={50}\r\n        value={imageInfo.text}\r\n        onChange={e => handleChange(e)}\r\n      />\r\n      {\r\n        imageInfo.text.length > 0\r\n        && imageInfo?.image?.src\r\n        && freePixels >= 0\r\n        && (\r\n          <a\r\n            role=\"button\"\r\n            href={imageInfo.dl}\r\n            download={imageInfo.name}\r\n          >\r\n            download\r\n          </a>\r\n        )\r\n      }\r\n      {\r\n        imageInfo?.image?.src\r\n        && (\r\n          <button type=\"button\" onClick={reset}>reset</button>\r\n        )\r\n      }\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const DEFAULT_BINARY_CONTENT = `\r\n  1011011 1110011 1100101 1100011 1100010 1101111 1011101\r\n  1011011 101111 1110011 1100101 1100011 1100010 1101111 1011101\r\n`;\r\n\r\nexport default DEFAULT_BINARY_CONTENT;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}