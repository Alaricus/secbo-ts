{"version":3,"sources":["components/ImageUploader.tsx","components/ImageDetails.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ImageUploader","props","updateCanvas","imageInfo","setImageInfo","readAlpha","textToBinary","className","onDrop","e","preventDefault","fr","FileReader","img","Image","file","dataTransfer","files","type","readAsDataURL","console","log","onload","event","image","name","text","binary","src","target","result","err","onDragEnter","onDragOver","alt","ImageDetails","pixels","freePixels","style","color","App","canvasRef","useRef","canvasReady","setCanvasReady","useState","dl","setPixels","setFreePixels","ctx","current","getContext","useEffect","tempPixels","width","height","tempFreePixels","length","txt","split","map","c","charCodeAt","toString","join","handleChange","ctxImageData","getImageData","canvas","data","forEach","datum","index","digit","putImageData","alert","writeAlpha","value","toDataURL","drawImage","bin","b","String","fromCharCode","parseInt","binaryToText","reduce","acc","startsWith","substring","endsWith","rows","cols","onChange","role","href","download","onClick","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f8d31b6.chunk.js","sourcesContent":["import { Dispatch, FC, DragEvent, SetStateAction } from 'react';\r\nimport { ImageInfo, UpdateCanvas, ReadAlpha, TextConversion } from './types';\r\n\r\ninterface ImageUploaderProps {\r\n  updateCanvas: UpdateCanvas,\r\n  imageInfo: ImageInfo,\r\n  setImageInfo: Dispatch<SetStateAction<ImageInfo>>,\r\n  readAlpha: ReadAlpha,\r\n  textToBinary: TextConversion,\r\n}\r\n\r\nconst ImageUploader: FC<ImageUploaderProps> = props => {\r\n  const { updateCanvas, imageInfo, setImageInfo, readAlpha, textToBinary } = props;\r\n\r\n  const uploadImage = (e: DragEvent<HTMLDivElement>): void => {\r\n    e.preventDefault();\r\n    const fr = new FileReader();\r\n    const img = new Image();\r\n\r\n    // Only accept png images and only use the first file if several are dragged.\r\n    const file = e.dataTransfer.files[0];\r\n\r\n    if (file.type === 'image/png') {\r\n      fr.readAsDataURL(file);\r\n    } else {\r\n      // TODO: Set up a mechanism for reporting errors to the user\r\n      console.log('Invalid format. Use a PNG image.');\r\n    }\r\n\r\n    fr.onload = event => {\r\n      try {\r\n        img.onload = () => {\r\n          updateCanvas(img);\r\n          setImageInfo({\r\n            ...imageInfo,\r\n            image: img,\r\n            name: file.name,\r\n            text: readAlpha() || '',\r\n            binary: textToBinary(readAlpha() || ''),\r\n          });\r\n        };\r\n        // TODO: This seems like a bad way of doing things. Sesearch further.\r\n        img.src = event?.target ? event.target.result as string : '';\r\n      } catch (err) {\r\n        // TODO: Set up a mechanism for reporting errors to the user\r\n        console.log('File failed to load.');\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"ImageUploader\"\r\n      onDrop={uploadImage}\r\n      onDragEnter={e => e.preventDefault()}\r\n      onDragOver={e => e.preventDefault()}\r\n    >\r\n      {\r\n      imageInfo.image\r\n        ? (\r\n          <img\r\n            className=\"ImagePreview\"\r\n            src={imageInfo.image.src}\r\n            alt=\"thumbnail\"\r\n          />\r\n        ) : (\r\n          <span>drag an image file here</span>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUploader;\r\n","import { FC } from 'react';\r\nimport { ImageInfo } from './types';\r\n\r\ninterface ImageDetailsProps {\r\n  imageInfo: ImageInfo,\r\n  pixels: number,\r\n  freePixels: number,\r\n}\r\n\r\nconst ImageDetails: FC<ImageDetailsProps> = props => {\r\n  const { imageInfo, pixels, freePixels } = props;\r\n\r\n  return (\r\n    <div className=\"Details\">\r\n      {imageInfo.image && `${pixels} total pixels, ` }\r\n      <span style={{ color: freePixels > 0 ? 'black' : 'red' }}>\r\n        { imageInfo.image && `${freePixels} still available` }\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageDetails;\r\n","import { useRef, useEffect, useState, ChangeEvent } from 'react';\r\nimport ImageUploader from './ImageUploader';\r\nimport ImageDetails from './ImageDetails';\r\nimport { ImageInfo, UpdateCanvas, ReadAlpha, TextConversion } from './types';\r\n\r\nconst App = () => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [canvasReady, setCanvasReady] = useState(false);\r\n  const [imageInfo, setImageInfo] = useState<ImageInfo>({ text: '', binary: '', image: null, name: '', dl: '' });\r\n  const [pixels, setPixels] = useState(0);\r\n  const [freePixels, setFreePixels] = useState(0);\r\n\r\n  // TODO: Why do I need to define the above as null and why does the receiving component have to worry about it\r\n  // potentially being null? I have the ref in the JSX below, it could never be null because it's always present.\r\n\r\n  let ctx: CanvasRenderingContext2D | null = null;\r\n\r\n  if (canvasRef.current) {\r\n    ctx = canvasRef.current.getContext('2d');\r\n  }\r\n\r\n  const updateCanvas: UpdateCanvas = image => {\r\n    // TODO: See if this \"if\" null check can be avoided.\r\n    if (ctx) {\r\n      ctx.canvas.width = image.width;\r\n      ctx.canvas.height = image.height;\r\n      ctx.drawImage(image, 0, 0);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (canvasRef.current && !canvasReady) {\r\n      setCanvasReady(true);\r\n    }\r\n  }, [canvasRef]);\r\n\r\n  useEffect(() => {\r\n    if (imageInfo?.image) {\r\n      const tempPixels = imageInfo.image.width * imageInfo.image.height;\r\n      const tempFreePixels = tempPixels - imageInfo.binary.length;\r\n\r\n      setPixels(tempPixels);\r\n      setFreePixels(tempFreePixels);\r\n    }\r\n  }, [imageInfo.text, imageInfo.binary, imageInfo.image]);\r\n\r\n  const textToBinary: TextConversion = txt => `[secbo]${txt}[/secbo]`.split('').map(c => `${c.charCodeAt(0).toString(2)} `).join('');\r\n\r\n  const binaryToText: TextConversion = bin => bin.split(' ').map(b => String.fromCharCode(parseInt(b, 2))).join('');\r\n\r\n  const reset = (image: HTMLImageElement | null, name: string): void => {\r\n    setImageInfo({\r\n      text: '',\r\n      binary: '1011011 1110011 1100101 1100011 1100010 1101111 1011101  1011011 101111 1110011 1100101 1100011 1100010 1101111 1011101',\r\n      image,\r\n      name,\r\n      dl: '',\r\n    });\r\n  };\r\n\r\n  const readAlpha: ReadAlpha = () => {\r\n    // TODO: See if this \"if\" null check can be avoided.\r\n    if (ctx) {\r\n      const ctxImageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      const bin = ctxImageData.data.reduce((acc, value, index) => {\r\n        if (index > 0 && (index + 1) % 4 === 0) {\r\n          if (value === 253) {\r\n            const tempAcc = `${acc} `;\r\n            return tempAcc;\r\n          }\r\n          if (value === 254) {\r\n            const tempAcc = `${acc}1`;\r\n            return tempAcc;\r\n          }\r\n          if (value === 255) {\r\n            const tempAcc = `${acc}0`;\r\n            return tempAcc;\r\n          }\r\n        }\r\n        return acc;\r\n      }, '');\r\n\r\n      const text = binaryToText(bin);\r\n\r\n      if (text.startsWith('[secbo]') && text.substring(0, text.length - 1).endsWith('[/secbo]')) {\r\n        return text.substring(7, text.length - 9);\r\n      }\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const writeAlpha = (binary: string): void => {\r\n    // TODO: See if this \"if\" null check can be avoided.\r\n    if (ctx) {\r\n      const ctxImageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      if (ctxImageData.data.length / 4 >= binary.length) {\r\n        // This sets everything to 255, so no need to handle zeroes\r\n        ctxImageData.data.forEach((datum, index) => {\r\n          if (index > 0 && (index + 1) % 4 === 0) {\r\n            ctxImageData.data[index] = 255;\r\n          }\r\n        });\r\n\r\n        binary.split('').forEach((digit, index) => {\r\n          if (digit === '1') {\r\n            ctxImageData.data[(index * 4) + 3] = 254;\r\n          }\r\n\r\n          if (digit === ' ') {\r\n            ctxImageData.data[(index * 4) + 3] = 253;\r\n          }\r\n        });\r\n\r\n        ctx.putImageData(ctxImageData, 0, 0);\r\n      } else {\r\n        // TODO: Set up a mechanism for reporting errors to the user\r\n        alert('The image was too small to contain all this data.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\r\n    writeAlpha(textToBinary(e.target.value));\r\n    setImageInfo({\r\n      ...imageInfo,\r\n      text: e.target.value,\r\n      binary: textToBinary(e.target.value),\r\n      dl: canvasRef.current?.toDataURL('image/png') || '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>secbo</h2>\r\n      <ImageUploader\r\n        updateCanvas={updateCanvas}\r\n        imageInfo={imageInfo}\r\n        setImageInfo={setImageInfo}\r\n        readAlpha={readAlpha}\r\n        textToBinary={textToBinary}\r\n      />\r\n      <ImageDetails\r\n        imageInfo={imageInfo}\r\n        pixels={pixels}\r\n        freePixels={freePixels}\r\n      />\r\n      <textarea\r\n        rows={15}\r\n        cols={50}\r\n        value={imageInfo.text}\r\n        onChange={e => handleChange(e)}\r\n      />\r\n      {\r\n        imageInfo.text.length > 0\r\n        && imageInfo?.image?.src\r\n        && freePixels >= 0\r\n        && (\r\n          <a\r\n            role=\"button\"\r\n            href={imageInfo.dl}\r\n            download={imageInfo.name}\r\n          >\r\n            download\r\n          </a>\r\n        )\r\n      }\r\n      {\r\n        imageInfo?.image?.src\r\n        && (\r\n          <button type=\"button\" onClick={() => reset(null, '')}>clear</button>\r\n        )\r\n      }\r\n      <canvas ref={canvasRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}